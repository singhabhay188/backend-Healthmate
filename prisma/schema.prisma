generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String      @id @default(cuid())
  name          String
  email         String?     @unique
  phone         String
  addresses     Address[]
  orders        Order[]
  cart          Cart?
  reviews       Review[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Cart model
model Cart {
  id        String      @id @default(cuid())
  userId    String      @unique
  user      User        @relation(fields: [userId], references: [id])
  items     ProductInfo[]
  totalP    Float      @default(0)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// ProductInfo model
model ProductInfo {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  productId String
  orderId   String?
  cartId    String?

  product   Product  @relation(fields: [productId], references: [id])
  order     Order?   @relation(fields: [orderId], references: [id])
  cart      Cart?    @relation(fields: [cartId], references: [id])
}

// Order model
model Order {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     ProductInfo[]
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Admin model
model Admin {
  id    String  @id @default(cuid())
  name  String
  email String  @unique
  password String
}

// Product model
model Product {
  id            String         @id @default(cuid())
  name          String
  ratingSum     Int           @default(0)
  ratingTotal   Int           @default(0)
  description   String
  imageLink     String[]
  thumbnail     String
  reviews       Review[]
  type          MedsType
  discountPer   Int          @default(0)
  quantity      Int?
  productType   ProductType
  categories    Category[]    @default([])
  brand         String
  price         Int          @default(0)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  orderItems    ProductInfo[]
}

// Review model
model Review {
  id        String    @id @default(cuid())
  userId    String
  productId String
  rating    Int       @default(3)
  comment   String?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Address model
model Address {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  line1       String
  line2       String?
  city        String
  state       String
  pincode     String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ENUM Order Status
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// Enum for Product Types
enum ProductType {
  capsule
  tablet
  powder
  sachet
  other
  liquid
}

// Enum for Meds Types
enum MedsType {
  Meds
  Supplement
  Cosmetic
  Food
}

// Enum for Categories
enum Category {
  Hair_Care
  Oral_Care
  Sexual_Wellness
  Skin_Care
  Feminine_Care
  Baby_Care
  Elderly_Care
  Men_Grooming
  Vitamin_And_Nutrition
  Fitness_Supplements
  Nutritional_Drinks
  Healthy_Snacks
  Herbal_Juice
  Monitoring_Devices
  Rehydration_Beverages
  Immunity_Boosters
  Medicine
  Stomach_Care
  Cold_And_Cough
  Pain_Relief
  First_Aid
  Diabetes
  Eye_And_Ear_Care
  Skin_Infection
  Supports_And_Braces
}